{"version":3,"sources":["components/atoms/Anchor/Anchor.js","components/molecules/Header/Header.js","components/atoms/Image/Image.js","components/atoms/Para/Para.js","components/molecules/List/List.js","components/organisms/HomePage/HomePage.js","utils/dateTime.js","App.js","serviceWorker.js","index.js"],"names":["Anchor","children","to","type","className","onClick","role","others","href","classnames","data-hal-action-name","defaultProps","Header","props","console","log","item","style","Fragment","keys","name","url","Image","src","srcset","alt","sizes","other","srcSet","onError","e","target","display","Para","inheritedStyles","List","ListType","borderseparator","nodefaultview","inline","nested","nomargin","HomePage","useState","hits","data","setData","useEffect","a","axios","result","fetchData","width","height","map","linkItem","num_comments","points","title","author","Date","getUTCHours","getHoursFromISOString","created_at","App","Boolean","window","location","hostname","match","ReactDOM","hydrate","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cfb936c1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst propTypes = {\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  type: PropTypes.oneOf(['full-width', 'full-width-icon', '']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  onClick: PropTypes.func,\n  role: PropTypes.string,\n};\n\nexport const createUrlSearchParams = (query) => {\n  const queryValue = query || {};\n  const queryParams = [];\n  const keys = Object.keys(queryValue);\n  for (let i = 0, l = keys.length; i < l; i += 1) {\n    queryParams.push(`${keys[i]}=${queryValue[keys[i]]}`);\n  }\n  return queryParams.join('&');\n};\n\nconst Anchor = ({\n  children,\n  to,\n  type,\n  className,\n  onClick,\n  role,\n  ...others\n}) => {\n  return (\n    <a\n      role={role}\n      href={to}\n      className={classnames('cta', type, className)}\n      onClick={onClick}\n      data-hal-action-name={typeof children === 'string' && `text: ${children}`}\n      {...others}\n    >\n      {children}\n    </a>\n  );\n};\n\nAnchor.propTypes = propTypes;\nAnchor.defaultProps = {\n  className: '',\n  children: null,\n  type: '',\n  onClick: null,\n  role: 'link',\n};\n\nexport default Anchor;\n","import React from 'react';\nimport Anchor from '../../atoms/Anchor/Anchor';\n\nconst Header = (props) => {\n  console.log('props', props);\n  const { item, className,style } = props;\n  return (\n    <React.Fragment>\n      <div className={className} style={style}>\n        <Anchor keys={item.name} to={item.url}>\n          {item.name}\n        </Anchor>\n      </div>\n    </React.Fragment>\n  );\n};\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  alt: PropTypes.string.isRequired,\n  srcset: PropTypes.string,\n  src: PropTypes.string.isRequired,\n  className: PropTypes.string,\n};\n\nconst Image = ({ className, src, srcset, sizes, alt, ...other }) => {\n  function addErrorClass(e) {\n    e.target.style.display = 'none';\n  }\n\n  return (\n    <React.Fragment>\n      <img\n        className={className}\n        src={src}\n        srcSet={srcset || null}\n        alt={alt}\n        onError={addErrorClass}\n        {...other}\n      />\n    </React.Fragment>\n  );\n};\n\nImage.defaultProps = {\n  srcset: '',\n  className: '',\n};\n\nImage.propTypes = propTypes;\n\nexport default Image;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  inheritedStyles: PropTypes.string,\n};\n\nconst Para = ({ children, className, inheritedStyles, ...others }) => (\n  <p className={className} {...others}>\n    {children}\n  </p>\n);\n\nPara.defaultProps = {\n  inheritedStyles: '',\n  className: '',\n};\n\nPara.propTypes = propTypes;\n\nexport default Para;\n","/* List*/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  ListType: PropTypes.oneOf(['ul', 'ol']),\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  nested: PropTypes.bool,\n  inline: PropTypes.bool,\n  nodefaultview: PropTypes.bool,\n  borderseparator: PropTypes.bool,\n  nomargin: PropTypes.bool,\n  inheritedStyles: PropTypes.string,\n};\n\nconst List = ({ className, ListType, children, ...others }) => (\n  <ListType className={className} {...others}>\n    {children}\n  </ListType>\n);\n\nList.propTypes = propTypes;\n\nList.defaultProps = {\n  inheritedStyles: '',\n  ListType: 'ul',\n  className: '',\n  borderseparator: false,\n  nodefaultview: false,\n  inline: false,\n  nested: false,\n  nomargin: false,\n};\n\nexport default List;\n","import React, { useState, useEffect } from 'react';\nimport Header from '../../molecules/Header/Header';\nimport Anchor from '../../atoms/Anchor/Anchor';\nimport Image from '../../atoms/Image/Image';\nimport Para from '../../atoms/Para/Para';\nimport List from '../../molecules/List/List';\nimport { getHoursFromISOString } from '../../../utils/dateTime';\nimport axios from 'axios';\nimport './HomePage.scss';\n\nconst HomePage = (props) => {\n  const [data, setData] = useState({ hits: [] });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios('http://hn.algolia.com/api/v1/search');\n\n      console.log('res', result);\n\n      setData(result.data);\n    };\n    fetchData();\n  }, []);\n\n  const anchorArray = [\n    {\n      name: 'top',\n      url: '/',\n    },\n    {\n      name: 'new',\n      url: '/',\n    },\n  ];\n\n  return (\n    <div className=\"homepage\">\n      <div className=\"homepage-header flex align-center\">\n        <Anchor to=\"/\" className=\"hompage-header-icon\">\n          <Image\n            src=\"y18.gif\"\n            width=\"18\"\n            height=\"18\"\n            className=\"header-image\"\n          />\n        </Anchor>\n        {anchorArray.map((linkItem) => (\n          <Header item={linkItem} className=\"header-container\" />\n        ))}\n      </div>\n      <List className=\"list-container\">\n        {data &&\n          data.hits &&\n          data.hits.map((item) => {\n            return (\n              <div className=\"list-content flex align-center\">\n                <div className=\"comments\">{item.num_comments}</div>\n                <div className=\"points\">{item.points}</div>\n                <Para className=\"story-details\">\n                  <span className=\"story-title\">{item.title}</span>\n                  <Anchor\n                    to={item.url}\n                    className=\"story-url\"\n                  >{`(${item.url})`}</Anchor>\n                  <span className=\"keyword-by\">by</span>\n                  <span className=\"story-author\">{item.author}</span>\n                  <span className=\"story-time\">\n                    {getHoursFromISOString(item.created_at)}\n                    <span className=\"hours-ago-keyword\">hours ago</span>\n                  </span>\n                  <span className=\"hide-brackets\">[</span>\n                  <span>hide</span>\n                  <span className=\"hide-brackets\">]</span>\n                </Para>\n              </div>\n            );\n          })}\n      </List>\n    </div>\n  );\n};\n\nexport default HomePage;\n","export const getHoursFromISOString = (data) => {\n  const date = new Date(data);\n  const hours = date.getUTCHours();\n  return hours;\n};\n","import React from 'react';\nimport HomePage from './components/organisms/HomePage';\nimport './index.scss';\n\nconst App = () => {\n  return <HomePage />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.hydrate(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}